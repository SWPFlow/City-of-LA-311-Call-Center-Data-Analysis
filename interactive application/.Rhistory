shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# zip_plot_customized(request_data, "Bulky Items", "2015-12-01", "2016-03-01")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
load("processed_requests2.RData")
setwd("~/Desktop/DSO545/Final project")
load("processed_requests2.RData")
View(request_data)
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
?zip_choropleth_acs
?zip_choropleth
zip_choropleth
zip_choropleth(requests_zip,
zip_zoom = zip_vec,
title="Requests numbers by zipcode",
legend="Requests numbers")
?ZipChoropleth
p = zip_choropleth(requests_zip,
zip_zoom = zip_vec,
title="Requests numbers by zipcode",
legend="Requests numbers")
p$ggplot_scale = scale_fill_brewer(name="Population", palette=3, drop=FALSE)
p$render()
library(ggplot2)
p = zip_choropleth(requests_zip,
zip_zoom = zip_vec,
title="Requests numbers by zipcode",
legend="Requests numbers")
p$ggplot_scale = scale_fill_brewer(name="Population", palette=3, drop=FALSE)
p$render()
p
p = zip_choropleth(requests_zip,
zip_zoom = zip_vec,
title="Requests numbers by zipcode",
legend="Requests numbers") +
scale_fill_brewer(name="Population", palette=3, drop=FALSE)
p = zip_choropleth(requests_zip,
zip_zoom = zip_vec,
title="Requests numbers by zipcode",
legend="Requests numbers") +
scale_fill_brewer(name="Population", palette=2, drop=FALSE)
zip_choropleth(requests_zip,
zip_zoom = zip_vec,
title="Requests numbers by zipcode",
legend="Requests numbers") +
scale_fill_brewer(name="Population", palette=2, drop=FALSE)
zip_choropleth(requests_zip,
zip_zoom = zip_vec,
title="Requests numbers by zipcode",
legend="Requests numbers") +
scale_fill_brewer(name="Population", palette=3, drop=FALSE)
zip_choropleth(requests_zip,
zip_zoom = zip_vec,
title="Requests numbers by zipcode",
legend="Requests numbers") +
scale_fill_brewer(name="Population", palette=4, drop=FALSE)
zip_choropleth(requests_zip,
zip_zoom = zip_vec,
title="Requests numbers by zipcode",
legend="Requests numbers") +
scale_fill_brewer(name="Population", palette="OrRd", drop=FALSE)
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
res = revgeocode("E-118.429, N34.3206", output = "more")
library(ggmap)
res = revgeocode("E-118.429, N34.3206", output = "more")
sample <- as.numeric(geocode("E-118.429, N34.3206"))
res = revgeocode(sample, output = "more")
res$postal_code
sample <- as.numeric(geocode("W118.429, N34.3206"))
res = revgeocode(sample, output = "more")
res$postal_code
sample <- as.numeric(geocode("W118.429, N34.3206"))
sample <- as.numeric(geocode("E-118.429, N34.3206"))
?revgeocode
res = revgeocode("E-118.429, N34.3206", output = "more")
res = revgeocode(c(-118.429, N34.3206), output = "more")
res = revgeocode(c(-118.429, 34.3206), output = "more")
res$postal_code
res = revgeocode(c(Lon, Lat), output = "more")
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
location_to_zip(-118.429, 34.3206)
shiny::runApp('fight-on/interactive application')
location_to_zip(-118.429, 34.3206)
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
top_zip_list(request_data, "Bulky Items", "2015-12-01", "2016-03-01")
class(top_zip_list(request_data, "Bulky Items", "2015-12-01", "2016-03-01"))
as.table(top_zip_list(request_data, "Bulky Items", "2015-12-01", "2016-03-01"))
as.data.frame(top_zip_list(request_data, "Bulky Items", "2015-12-01", "2016-03-01"))
shiny::runApp('fight-on/interactive application')
top_zip_list(request_data, "Bulky Items", "2015-12-01", "2016-03-01")
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
load("processed_requests2.RData")
View(request_data)
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
request_data = select(request_data, ZipCode, CD, NC, RequestType)
load("processed_requests2.RData")
request_data = select(request_data, ZipCode, CD, NC, RequestType, CreatedDate)
rm(population_zip, requests_zip, res, rgcdf, p, sample, zip_vec, zip_vec2, location_to_zip, top_zip_list, zip_plot_customized, zip_plot_customized2)
save.image("~/Desktop/DSO545/Final project/fight-on/interactive application/all_data_for_shiny.RData")
shiny::runApp('fight-on/interactive application')
library(dplyr)
library(ggplot2)
library(ggmap)
LA_map +
geom_point(data = sampled_data,
aes(x = Longitude, y = Latitude),
size = 5, alpha = 0.1, color = "darkred")
LA_map = qmap("Los Angeles", zoom = 10, maptype = "road")
LA_map +
stat_density2d(data = sampled_data,
aes(x = Longitude, y = Latitude, fill = ..level..),
geom = "polygon", alpha = 0.3) +
scale_fill_gradient(low = "white", high = "darkred")
load("processed_requests2.RData")
View(request_data)
library(lubridate)
request_data$duration = round((request_data$UpdatedDate-request_data$CreatedDate)/(60*60),2)
request_data = select(request_data, ZipCode, CD, NC, RequestType, CreatedDate, month_created, weekday_created, hour_created, duration)
View(population_zip)
View(population_zip)
View(population_zip)
request_data = mutate(request_data, update_duration = ifelse(duration <= 0, 0, duration))
request_data$duration = NULL
request_data %>%
group_by(CD) %>%
summarise(counts = n(),
avg_update = mean(update_duration))
request_data %>%
filter(!is.na(CD)) %>%
group_by(CD) %>%
summarise(counts = n(),
avg_update = round(mean(update_duration),2))
cd_zip %>%
group_by(CD, Zipcode) %>%
summarise(count = n())
cd_zip = request_data %>%
group_by(CD, Zipcode) %>%
summarise(count = n())
cd_zip = request_data %>%
group_by(CD, ZipCode) %>%
summarise(count = n())
View(cd_zip)
cd_zip = request_data %>%
group_by(CD, ZipCode) %>%
summarise(count = n())
setwd("~/Desktop/DSO545/Final project")
CD_stat = read.csv("CD summary statisitcs.csv")
View(CD_stat)
request_data %>%
group_by(CD) %>%
summarise(count = n(),
avg_duration = mean(update_duration))
CD_stat2 = request_data %>%
filter(!is.na(CD)) %>%
group_by(CD) %>%
summarise(count = n(),
avg_duration = round(mean(update_duration),2))
View(CD_stat2)
merge(CD_stat, CD_stat2, by.x = CD, by.y = CD)
colnames(CD_stat)
merge(CD_stat, CD_stat2, by.x = "CD", by.y = "CD")
CD_summary = merge(CD_stat, CD_stat2, by.x = "CD", by.y = "CD")
View(CD_summary)
CD_summary$CD = as.numeric(CD_summary$CD)
CD_summary
CD_summary$request_pop = CD_summary$count / CD_summary$Population.000s.
CD_summary$request_pop = round(CD_summary$count / CD_summary$Population.000s., 2)
colnames(CD_summary)
colnames(CD_summary) = c("CD", "Population", "Median_age", "Median_hs_income",
"unemployment_rate", "top_occp1", "top_occp2",
"top_occp3", "Requests_count", "avg_duration",
"Requests_by_pop")
colnames(CD_summary)
ggplot(CD_summary, aes(x = unemployment_rate, y = Requests_by_pop)) +
geom_point()
ggplot(CD_summary, aes(x = Median_hs_income, y = Requests_by_pop)) +
geom_point()
cor(CD_summary)
rm(CD_stat, CD_stat2, cd_zip, population_zip, requests_zip, zip_vec, zip_vec2, top_zip_list, zip_plot_customized)
View(CD_summary)
View(CD_summary)
View(request_data)
request_data = select(request_data, ZipCode, CD, RequestType, CreatedDate)
save.image("~/Desktop/DSO545/Final project/fight-on/interactive application/all_data_for_shiny.RData")
CD_summary %>%
filter(CD == cd)
filter(CD_summary, CD == "1")
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
t(CD_summary)
View(request_data)
load("processed_requests2.RData")
CD_stat = read.csv("CD summary statisitcs.csv")
CD_stat2 = request_data %>%
filter(!is.na(CD)) %>%
group_by(CD) %>%
summarise(count = n(),
avg_duration = round(mean(update_duration),2))
request_data$duration = round((request_data$UpdatedDate-request_data$CreatedDate)/(60*60),2)
request_data = mutate(request_data, update_duration = ifelse(duration <= 0, 0, duration))
request_data$duration = NULL
CD_stat2 = request_data %>%
filter(!is.na(CD)) %>%
group_by(CD) %>%
summarise(count = n(),
avg_duration = round(mean(update_duration),2))
CD_summary = merge(CD_stat, CD_stat2, by.x = "CD", by.y = "CD", all.x = TRUE)
View(CD_summary)
CD_summary$request_pop = round(CD_summary$count / CD_summary$Population.000s., 2)
CD_summary$count[16]
CD_summary$count[16] = nrow(request_data)
CD_summary$avg_duration = mean(request_data$update_duration)
CD_summary = merge(CD_stat, CD_stat2, by.x = "CD", by.y = "CD", all.x = TRUE)
CD_summary$count[16] = nrow(request_data)
CD_summary$avg_duration[16] = mean(request_data$update_duration)
CD_summary = merge(CD_stat, CD_stat2, by.x = "CD", by.y = "CD", all.x = TRUE)
CD_summary$count[16] = nrow(request_data)
CD_summary$avg_duration[16] = round(mean(request_data$update_duration),2)
CD_summary$request_pop = round(CD_summary$count / CD_summary$Population.000s., 2)
CD_summary$request_pop = round(CD_summary$count / CD_summary$Population.000s., 2)
colnames(CD_summary) = c("Council District", "Population", "Median Age",
"Median Household Income", "Unemployment Rate",
"Top1 Occupation", "Top2 Occupation",
"Top3 Occupation", "Requests Counts",
"Average Update Duration", "Requests per 1000 Residents")
ggplot(CD_summary, aes(x = `Unemployment Rate`, y = `Requests per 1000 Residents`)) +
geom_point()
rm(CD_stat, CD_stat2, population_zip, requests_zip, zip_vec, zip_vec2, cd_top_requests, top_zip_list, zip_plot_customized)
save.image("~/Desktop/DSO545/Final project/fight-on/interactive application/all_data_for_shiny.RData")
t(filter(CD_summary, `Council District` %in% c(1, "city of LA")))
cd_key_stats <- function(data, cd) {
stats = t(filter(CD_summary, `Council District` %in% c(rv$cd, "city of LA")))
}
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
View(cd_key_stats)
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
CD_lists = as.character(1:15)
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
colnames(CD_summary) = c("Council District", "Population(000s)", "Median Age",
"Median Household Income($000s)", "Unemployment Rate",
"Top1 Occupation", "Top2 Occupation",
"Top3 Occupation", "Requests Counts",
"Average Update Duration", "Requests per 1000 Residents")
rm(CD_lists, cd_key_stats, cd_top_requests, top_zip_list, zip_plot_customized)
load("all_data_for_shiny.RData")
setwd("~/Desktop/DSO545/Final project/fight-on/interactive application")
load("all_data_for_shiny.RData")
View(CD_summary)
colnames(CD_summary) = c("Council District", "Population(000s)", "Median Age",
"Median Household Income($000s)", "Unemployment Rate",
"Top1 Occupation", "Top2 Occupation",
"Top3 Occupation", "Requests Counts",
"Average Update Duration", "Requests per 1000 Residents")
shiny::runApp()
rm(cd_key_stats, cd_top_requests, top_zip_list, zip_plot_customized)
save.image("~/Desktop/DSO545/Final project/fight-on/interactive application/all_data_for_shiny.RData")
request_data = select(request_data, ZipCode, CD, CreatedDate, RequestType)
shiny::runApp()
rm(cd_key_stats, cd_top_requests, top_zip_list, zip_plot_customized)
save.image("~/Desktop/DSO545/Final project/fight-on/interactive application/all_data_for_shiny.RData")
shiny::runApp()
shiny::runApp()
colnames(CD_summary) = c("Council District", "Population(000s)", "Median Age",
"Median Household Income($000s)", "Unemployment Rate",
"Top1 Occupation", "Top2 Occupation",
"Top3 Occupation", "Requests Counts",
"Average Update Duration(min)",
"Requests per 1000 Residents")
rm(cd_key_stats, cd_top_requests, top_zip_list, zip_plot_customized)
save.image("~/Desktop/DSO545/Final project/fight-on/interactive application/all_data_for_shiny.RData")
"Requests per 1000 Residents")
shiny::runApp()
load("processed_requests2.RData")
setwd("~/Desktop/DSO545/Final project")
load("processed_requests2.RData")
zip_choropleth(requests_zip,
county_zoom=6037,
title="Requests number by zipcode",
legend="Requests numbers")
zip_choropleth(requests_zip,
zip_zoom = zip_vec,
title="Requests number by zipcode",
legend="Requests numbers")
LA_map = qmap("Los Angeles", zoom = 10, maptype = "road")
LA_map +
stat_density2d(data = sampled_data,
aes(x = Longitude, y = Latitude, fill = ..level..),
geom = "polygon", alpha = 0.3) +
scale_fill_gradient(low = "white", high = "darkred")
LA_map = qmap("Los Angeles", zoom = 10, maptype = "road")
LA_map +
stat_density2d(data = sampled_data,
aes(x = Longitude, y = Latitude, fill = ..level..),
geom = "polygon", alpha = 0.3) +
scale_fill_gradient(low = "white", high = "darkred")
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
stats
shiny::runApp('fight-on/interactive application')
cd = CD_summary[1:15,]
View(cd)
?lm
colnames(cd)
lm(`Requests per 1000 Residents`~`Population(000s)`+`Median Age`+`Median Household Income($000s)`+`Unemployment Rate`+`Top1 Occupation`)
lm(`Requests per 1000 Residents`~`Population(000s)`+`Median Age`+`Median Household Income($000s)`+`Unemployment Rate`+`Top1 Occupation`, cd)
cd_lm = lm(`Requests per 1000 Residents`~`Population(000s)`+`Median Age`+`Median Household Income($000s)`+`Unemployment Rate`+`Top1 Occupation`, cd)
cd_lm$summary
summary(cd_lm)
summary(lm(`Requests per 1000 Residents`~`Population(000s)`+`Median Age`+`Median Household Income($000s)`+`Top1 Occupation`, cd))
summary(lm(`Requests per 1000 Residents`~`Population(000s)`+`Median Age`+`Median Household Income($000s)`, cd))
summary(lm(`Requests per 1000 Residents`~`Median Age`+`Median Household Income($000s)`+`Top1 Occupation`, cd))
summary(lm(`Requests per 1000 Residents`~`Median Age`+`Median Household Income($000s)`, cd))
?cor
cor(cd)
cor(cd[c(2:5,10,11)])
round(cor(cd[c(2:5,10,11)]),2)
cor(cd[2:5], cd$`Requests per 1000 Residents`)
shiny::runApp('fight-on/interactive application')
shiny::runApp('fight-on/interactive application')
cor(cd$`Requests per 1000 Residents`, cd$`Average Update Duration(min)`)
install.packages("shinyBS")
?highlightCells()
highlightCells
?highlightCells
??highlightCells
shiny::runApp('fight-on/interactive application')
cd_key_stats(CD_summary, c("city of LA"))
colnames(cd_key_stats(CD_summary, c("city of LA")))
t(filter(CD_summary, `Council District` %in% c("city of LA")))
t(filter(CD_summary, `Council District` %in% c("city of LA")))[1,]
cd_key_stats <- function(data, cd) {
stats = t(filter(data, `Council District` %in% cd))
colnames(stats) = stats[1,]
#stats = stats[2:nrow(stats),]
stats
}
cd_key_stats(CD_summary, c("city of LA"))
cd_key_stats <- function(data, cd) {
stats = t(filter(data, `Council District` %in% cd))
colnames(stats) = stats[1,]
stats = stats[2:nrow(stats),]
stats
}
cd_key_stats(CD_summary, c("city of LA"))
cd_key_stats <- function(data, cd) {
stats = t(filter(data, `Council District` %in% cd))
colnames(stats) = stats[1,]
#stats = stats[2:nrow(stats),]
stats[1,] = NULL
stats
}
cd_key_stats(CD_summary, c("city of LA"))
trial = t(filter(CD_summary, `Council District` %in% c("city of LA")))
View(trial)
colnames(trial) = trial[1,]
trial
trial = t(filter(CD_summary, `Council District` %in% c("1,","city of LA")))
colnames(trial) = trial[1,]
trial = t(filter(CD_summary, `Council District` %in% c("1","city of LA")))
colnames(trial) = trial[1,]
trial = t(filter(CD_summary, `Council District` %in% c(city of LA")))
trial = t(filter(CD_summary, `Council District` %in% c("city of LA")))
class(trial)
rm(trial)
shiny::runApp('fight-on/interactive application')
trial = t(filter(CD_summary, `Council District` %in% c("city of LA")))
trial = as.data.frame(trial)
colnames(trial) = trial[1,]
trial = trial[2:nrow(trial),]
trial = t(filter(CD_summary, `Council District` %in% c("city of LA")))
trial = as.data.frame(trial)
colnames(trial) = trial[1,]
trial = as.data.frame(trial[2:nrow(trial),])
shiny::runApp('fight-on/interactive application')
trial = t(filter(CD_summary, `Council District` %in% c("city of LA")))
trial = as.data.frame(trial)
cd_names = trial[1,]
trial[1,]
cd_names = trial[1,1]
cd_names
trial = (filter(CD_summary, `Council District` %in% c("city of LA"))
)
cd_names = trial[,1]
cd_names
trial = filter(CD_summary, `Council District` %in% c("city of LA"))
trial[,1]
trial = as.data.frame(trial)
cd_names = trial[,1]
trial[1,1]
shiny::runApp('fight-on/interactive application')
trial = t(filter(CD_summary, `Council District` %in% c("city of LA")))
class(trial)
trial[1,]
cd_names = trial[1,]
trial = as.data.frame(trial[2:nrow(trial),])
colnames(trial)
colnames(trial) = cd_names
trial = t(filter(CD_summary, `Council District` %in% c("1","city of LA")))
cd_names = trial[1,]
trial = as.data.frame(trial[2:nrow(trial),])
colnames(trial) = cd_names
shiny::runApp('fight-on/interactive application')
