{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(plotly)\nsource(\"cd_summary_support.R\")\n\nrequest_types = c(\"Bulky Items\", \"Dead Animal Removal\", \"Graffiti Removal\",\n                  \"Electronic Waste\", \"Illegal Dumping Pickup\", \"Other\",\n                  \"Metal/Household Appliances\", \"Homeless Encampment\",\n                  \"Single Streetlight Issue\", \n                  \"Multiple Streetlight Issue\", \"Feedback\", \"Report Water Waste\")\n\nsocial_types = c(\"Median_Age\", \"Median_Household_Income\")\n\nserver <- function(input, output) {\n    \n    rv = reactiveValues(cd = c(\"city of LA\"), \n                        req_type = \"Metal/Household Appliances\",\n                        social_type = \"Median_Household_Income\")\n    \n    # if we click the buttom\n    observeEvent(input$button_cd, {\n        rv$cd = input$CD\n    })\n\n    observeEvent(input$button_req, {\n        rv$req_type = input$request_type\n        rv$social_type = input$social_type\n    })\n    \n    observeEvent(input$dep_source, {\n        output$plot <- renderPlot({\n            p <- ggplot(dep_eff, aes(x = Owner, y = RequestSource, fill = avg_update)) +\n                geom_tile() +\n                scale_fill_gradient(low = \"white\", high = \"darkred\") +\n                ggtitle(\"Service response time across department and request source\") +\n                xlab(\"Department assigned\") +\n                ylab(\"Source of Request\") +\n                theme(axis.text.x = element_text(angle = 30, hjust = 1)) +\n                guides(fill=guide_legend(title=\"Average response(hours)\"))\n            print(p)\n        }, height = 400, width = 600)\n    })     \n    \n    observeEvent(input$dep_cd, {\n        output$plot <- renderPlot({\n            p <- ggplot(cd_eff, aes(x = factor(CD), y = avg_update,color = Owner)) +\n                geom_point(size = 5) +\n                ggtitle(\"Resolution Efficiency Across Council Districts and Department\") +\n                xlab(\"Council Districts\") +\n                ylab(\"Average updated time(hours)\") +\n                guides(fill = guide_legend(title = \"Department\"))\n            print(p)\n        }, height = 400, width = 600)\n    })     \n    \n    observeEvent(input$dep_type, {\n        output$plot <- renderPlot({\n            p <- ggplot(type_eff, aes(x = RequestType, y = avg_update,color = Owner)) +\n                geom_point(size = 5) +\n                theme(axis.text.x = element_text(angle = 30, hjust = 1)) +\n                ggtitle(\"Service response time across department and request type\") +\n                xlab(\"Service Request Type\") +\n                ylab(\"Average response(hours)\") +\n                theme(axis.text.x = element_text(angle = 30, hjust = 1)) +\n                guides(fill=guide_legend(title=\"Department\"))\n            print(p)\n        }, height = 400, width = 600)\n    })     \n    \n     output$plot_income <- renderPlotly(\n         ggplotly(income_plot(rv$cd))\n     )\n    \n    output$plot_unemployment <- renderPlotly(\n        ggplotly(employment_plot(rv$cd))\n    )\n    \n    output$cd_summary <- renderTable(cd_key_stats(CD_summary, cd = rv$cd), \n                                 align = \"c\", rownames = TRUE, colnames = TRUE)\n    \n#     output$table2 <- renderTable(cd_top_requests(request_data, cd = rv$cd), \n#                                  align = \"c\", rownames = TRUE, colnames = TRUE)\n    \n    \n    output$wc <- renderPlot({\n        set.seed(152)\n        wordcloud(words = type_summary$RequestType, type_summary$count,\n                  colors = type_summary$colorlist, ordered.colors = TRUE,\n                  rot.per = 0.5)}\n    )\n    \n    output$type_summary <- renderTable(type_summary_table(), \n                                       align = \"c\", rownames = TRUE, colnames = TRUE)\n    \n    output$req_summary <- renderPlot(request_social_plot(rv$req_type, rv$social_type))\n    \n    \n    observeEvent(input$dep_source, {\n        output$dep_plot <- renderPlot(\n            def_eff_plot(), height = 400, width = 600)\n    })     \n    \n    observeEvent(input$dep_cd, {\n        output$dep_plot <- renderPlot(\n            cd_eff_plot(), height = 400, width = 600)\n    })     \n    \n    observeEvent(input$dep_type, {\n        output$dep_plot <- renderPlot(\n            type_eff_plot(), height = 400, width = 600)\n    })     \n    \n}",
    "created" : 1480897759278.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3386364815",
    "id" : "1045E149",
    "lastKnownWriteTime" : 1481058209,
    "path" : "~/Desktop/DSO545/Final project/fight-on/Shiny_cd_summary/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}