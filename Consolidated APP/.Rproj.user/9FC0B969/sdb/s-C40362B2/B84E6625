{
    "contents" : "# library(shiny)\n# library(ggplot2)\n# library(plotly)\n# library(lubridate)\n# library(dplyr)\n# library(viridis)\n# library(wordcloud)\n\n# load(\"data_for_shiny.RData\")\n\nserver <- function(input, output) {\n    \n    # button\n    observeEvent(input$duration, {\n        output$plot <- renderPlot(duration_summary_plot(), height = 400, width = 600)\n    }) \n    \n    observeEvent(input$bymonth, {\n        output$plot <- renderPlot(by_month_plot(), height = 400, width = 600)\n    }) \n    \n    observeEvent(input$byweek, {\n        output$plot <- renderPlot(by_weekday_plot(), height = 400, width = 600)\n    })\n    \n    observeEvent(input$weekday_hour, {\n        output$plot <- renderPlot(weekday_hour_heatmap(), height = 400, width = 600)\n    })\n    \n    observeEvent(input$source_count, {\n        output$plot2 <- renderPlot(source_count(), height = 400, width = 600)\n    })  \n    \n    observeEvent(input$source_type_count, {\n        output$plot2 <- renderPlot(source_type_count(), height = 400, width = 600)\n    })  \n    \n    observeEvent(input$source_eff, {\n        output$plot2 <- renderPlot(source_eff(), height = 400, width = 600)\n    })    \n    \n    observeEvent(input$source_month, {\n        output$plot2 <- renderPlot(source_month_heatmap(), height = 400, width = 600)\n    })\n    \n    observeEvent(input$source_weekday, {\n        output$plot2 <- renderPlot(source_weekday_heatmap(), height = 400, width = 600)\n    })\n    \n    observeEvent(input$type_month, {\n        output$plot <- renderPlot(type_month_heatmap(), height = 400, width = 600)\n    })\n    \n    observeEvent(input$type_weekday, {\n        output$plot <- renderPlot(type_weekday_heatmap(), height = 400, width = 600)\n    })\n    \n    observeEvent(input$calls_month, {\n        output$plot2 <- renderPlot(call_month_plot(), height = 400, width = 600)\n    })\n    \n    observeEvent(input$calls_hour, {\n        output$plot2 <- renderPlot(call_hour_plot(), height = 400, width = 600)\n    })\n\n    rv = reactiveValues(cd = c(\"city of LA\"), \n                        req_type = \"Metal/Household Appliances\",\n                        social_type = \"Median_Household_Income\")\n    \n    # if we click the buttom\n    observeEvent(input$button_cd, {\n        rv$cd = input$CD\n    })\n    \n    observeEvent(input$button_req, {\n        rv$req_type = input$request_type\n        rv$social_type = input$social_type\n    })\n    \n    observeEvent(input$dep_source, {\n        output$plot <- renderPlot({\n            p <- ggplot(dep_eff, aes(x = Owner, y = RequestSource, fill = avg_update)) +\n                geom_tile() +\n                scale_fill_gradient(low = \"white\", high = \"darkred\") +\n                ggtitle(\"Service response time across department and request source\") +\n                xlab(\"Department assigned\") +\n                ylab(\"Source of Request\") +\n                theme(axis.text.x = element_text(angle = 30, hjust = 1)) +\n                guides(fill=guide_legend(title=\"Average response(hours)\"))\n            print(p)\n        }, height = 400, width = 600)\n    })     \n    \n    observeEvent(input$dep_cd, {\n        output$plot <- renderPlot({\n            p <- ggplot(cd_eff, aes(x = factor(CD), y = avg_update,color = Owner)) +\n                geom_point(size = 5) +\n                ggtitle(\"Resolution Efficiency Across Council Districts and Department\") +\n                xlab(\"Council Districts\") +\n                ylab(\"Average updated time(hours)\") +\n                guides(fill = guide_legend(title = \"Department\"))\n            print(p)\n        }, height = 400, width = 600)\n    })     \n    \n    observeEvent(input$dep_type, {\n        output$plot <- renderPlot({\n            p <- ggplot(type_eff, aes(x = RequestType, y = avg_update,color = Owner)) +\n                geom_point(size = 5) +\n                theme(axis.text.x = element_text(angle = 30, hjust = 1)) +\n                ggtitle(\"Service response time across department and request type\") +\n                xlab(\"Service Request Type\") +\n                ylab(\"Average response(hours)\") +\n                theme(axis.text.x = element_text(angle = 30, hjust = 1)) +\n                guides(fill=guide_legend(title=\"Department\"))\n            print(p)\n        }, height = 400, width = 600)\n    })     \n    \n    output$plot_income <- renderPlotly(\n        ggplotly(income_plot(rv$cd))\n    )\n    \n    output$plot_unemployment <- renderPlotly(\n        ggplotly(employment_plot(rv$cd))\n    )\n    \n    output$cd_summary <- renderTable(cd_key_stats(CD_summary, cd = rv$cd), \n                                     align = \"c\", rownames = TRUE, colnames = TRUE)\n    \n    #     output$table2 <- renderTable(cd_top_requests(request_data, cd = rv$cd), \n    #                                  align = \"c\", rownames = TRUE, colnames = TRUE)\n    \n    \n    output$wc <- renderPlot({\n        set.seed(152)\n        wordcloud(words = type_summary$RequestType, type_summary$count,\n                  colors = type_summary$colorlist, ordered.colors = TRUE,\n                  rot.per = 0.5)}\n    )\n    \n    output$type_summary <- renderTable(type_summary_table(), \n                                       align = \"c\", rownames = TRUE, colnames = TRUE)\n    \n    output$req_summary <- renderPlot(request_social_plot(rv$req_type, rv$social_type))\n    \n    \n    observeEvent(input$dep_source, {\n        output$dep_plot <- renderPlot(\n            def_eff_plot(), height = 400, width = 600)\n    })     \n    \n    observeEvent(input$dep_cd, {\n        output$dep_plot <- renderPlot(\n            cd_eff_plot(), height = 400, width = 600)\n    })     \n    \n    observeEvent(input$dep_type, {\n        output$dep_plot <- renderPlot(\n            type_eff_plot(), height = 400, width = 600)\n    })     \n    \n        \n}\n\n",
    "created" : 1481076177226.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "204955162",
    "id" : "B84E6625",
    "lastKnownWriteTime" : 1481076627,
    "path" : "~/Desktop/DSO545/Final project/fight-on/Consolidated APP/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}