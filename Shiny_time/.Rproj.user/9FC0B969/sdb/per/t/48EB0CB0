{
    "contents" : "library(shiny)\nsource(\"time_based.R\")\n\nserver <- function(input, output) {\n  \n  # button\n  observeEvent(input$duration, {\n    output$plot <- renderPlot({\n      p <- ggplot(duration_summary, aes(x = reorder(RequestType, -mean), y = mean)) +\n        geom_bar(stat = \"identity\",\n                 fill = \"paleturquoise3\") +\n        ylab(\"Avg. Processing Time\") +\n        xlab(\"Request Type\") +\n        ggtitle(\"Processing time of different request types\") +\n        theme_classic() +\n        theme(axis.text.x = element_text(angle = 30, hjust = 1))\n      print(p)\n    }, height = 400, width = 600)\n  }) \n  \n  observeEvent(input$bymonth, {\n    output$plot <- renderPlot({\n      p <- ggplot(request1, aes(x = factor(month_created))) +\n        geom_bar(fill = \"paleturquoise3\") +\n        ylab(\"Number of Requests\") +\n        xlab(\"Month of the year\") +\n        ggtitle(\"Total Requests by Month\") +\n        theme_classic()\n      print(p) \n    }, height = 400, width = 600)\n  }) \n  \n  observeEvent(input$byweek, {\n    output$plot <- renderPlot({\n      p <- ggplot(request1, aes(x = weekday_created)) +\n        geom_bar(fill = \"paleturquoise3\") +\n        ylab(\"Number of Requests\") +\n        xlab(\"\") +\n        ggtitle(\"Total Requests by Weekday\") +\n        theme_classic()\n      print(p)\n    }, height = 400, width = 600)\n  })\n\n  observeEvent(input$weekday_hour, {\n    output$plot <- renderPlot({\n      p <- ggplot(request2, aes(x = weekday_created, \n                                y = factor(hour_created), \n                                fill = count)) +\n        geom_tile() +\n        scale_fill_gradient(low = \"white\", high = \"deeppink4\", \n                            breaks = NULL, labels = NULL) +\n        theme_classic() +\n        ylab(\"Time of the Day\") +\n        xlab(\"\") +\n        ggtitle(\"Total Requests by Weekday and Time of the day\")\n      print(p)\n    }, height = 400, width = 600)\n  })\n  \n  observeEvent(input$source_type, {\n    output$plot <- renderPlot({\n      p <- ggplot(request12,aes(x=RequestSource, y=RequestType, fill=Count))+\n        geom_tile()+\n        scale_fill_gradient(low = \"mistyrose\", high = \"deeppink3\") +\n        theme_classic() +\n        ylab(\"\") +\n        xlab(\"\") +\n        ggtitle(\"Requests by Source and Type\") +\n        theme(axis.text.x = element_text(angle = 30, hjust = 1))\n      print(p)\n    }, height = 400, width = 600)\n  })\n  \n  observeEvent(input$source_month, {\n    output$plot <- renderPlot({\n      p <- ggplot(request5, aes(x = RequestSource, \n                                y = factor(month_created), \n                                fill = count)) +\n        geom_tile() +\n        scale_fill_gradient(low = \"mistyrose\", high = \"deeppink3\", \n                            breaks = NULL, labels = NULL) +\n        theme_classic() +\n        ylab(\"Month of the Year\") +\n        xlab(\"\") +\n        ggtitle(\"Source of Request and Month of the Year\") +\n        theme(axis.text.x = element_text(angle = 30, hjust = 1))\n      print(p)\n    }, height = 400, width = 600)\n  })\n  \n  observeEvent(input$source_weekday, {\n    output$plot <- renderPlot({\n      p <- ggplot(request7, aes(x = RequestSource, \n                                y = factor(weekday_created), \n                                fill = count)) +\n        geom_tile() +\n        scale_fill_gradient(low = \"mistyrose\", high = \"deeppink3\", \n                            breaks = NULL, labels = NULL) +\n        theme_classic() +\n        ylab(\"\") +\n        xlab(\"\") +\n        ggtitle(\"Request Source by Weekday\") +\n        theme(axis.text.x = element_text(angle = 30, hjust = 1))\n      print(p)\n    }, height = 400, width = 600)\n  })\n  \n  observeEvent(input$type_month, {\n    output$plot <- renderPlot({\n      p <- ggplot(request6, aes(x = RequestType, \n                                y = factor(month_created), \n                                fill = count)) +\n        geom_tile() +\n        scale_fill_gradient(low = \"mistyrose\", high = \"deeppink3\", \n                            breaks = NULL, labels = NULL) +\n        theme_classic() +\n        ylab(\"Month of the Year\") +\n        xlab(\"\") +\n        ggtitle(\"Request Type by Month\") +\n        theme(axis.text.x = element_text(angle = 30, hjust = 1))\n      print(p)\n    }, height = 400, width = 600)\n  })\n  \n  observeEvent(input$type_weekday, {\n    output$plot <- renderPlot({\n      p <- ggplot(request8, aes(x = RequestType, \n                                y = factor(weekday_created), \n                                fill = count)) +\n        geom_tile() +\n        scale_fill_gradient(low = \"mistyrose\", high = \"deeppink3\", \n                            breaks = NULL, labels = NULL) +\n        theme_classic() +\n        ylab(\"\") +\n        xlab(\"\") +\n        ggtitle(\"Type of Request by Weekday\") +\n        theme(axis.text.x = element_text(angle = 30, hjust = 1))\n      print(p)\n    }, height = 400, width = 600)\n  })\n  \n  observeEvent(input$calls_month, {\n    output$plot <- renderPlot({\n      p <- ggplot(request9, aes(x = factor(month_created))) +\n        geom_bar(fill = \"paleturquoise3\") +\n        ylab(\"Number of Requests\") +\n        xlab(\"Month of the year\") +\n        ggtitle(\"Calls distribution by Month\") +\n        theme_classic()\n      print(p)\n    }, height = 400, width = 600)\n  })\n  \n  observeEvent(input$calls_hour, {\n    output$plot <- renderPlot({\n      p <- ggplot(request9, aes(x = factor(hour_created))) +\n        geom_bar(fill = \"paleturquoise3\") +\n        ylab(\"Number of Requests\") +\n        xlab(\"Hour of the day\") +\n        ggtitle(\"Calls distribution by hour of the day\") +\n        theme_classic()\n      print(p)\n    }, height = 400, width = 600)\n  })\n  \n}\n",
    "created" : 1480918962096.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2215117123",
    "id" : "48EB0CB0",
    "lastKnownWriteTime" : 1480918820,
    "path" : "~/Desktop/DSO545/Final project/fight-on/Shiny_time/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}